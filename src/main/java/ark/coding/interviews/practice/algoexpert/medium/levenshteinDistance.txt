   | " " | C | A | T | T | L | E |
-----------------------------------   
" "|  0  | 1 | 2 | 3 | 4 | 5 | 6 |
 M |  1  | 1 | 2 | 3 | 4 | 5 | 6 |
 A |  2  | 2 | 1 | 2 | 3 | 4 | 5 |
 P |  3  | 3 | 2 | 2 | 3 | 4 | 5 |
 L |  4  | 4 | 3 | 3 | 3 | 3 | 4 |
 E |  5  | 5 | 4 | 4 | 4 | 4 | 3 |
 
 for (char[row])        // str1 (to modify)
    for(char[col])      // str2 (modify to)
    if (char[row] == char[col])
        matrix[row][col] = matrix[row-1][col-1]
    else if (char[row] != char[col])
        matrix[row][col] = 1 + Min(matrix[row-1][col-1], matrix[row][col-1], matrix[row-1][col])
    
 return matrix[rowhigh][colHigh]
            
            
// Break problem down to changing first char from str1 to entire str2
// change first two chars of str1 ~> entire str2
// change first three chars of str1 ~> entire str2
// ...
// change upto `n-1` chars of str1 ~> entire str2
// change all `n` chars of str1 ~> entire str2

Use matrix[str.length][str2.length] to keep track of least no of operations to change 
str.substring(0, row) ~> str2
pattern emerges in the matrix.
